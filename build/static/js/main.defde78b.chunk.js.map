{"version":3,"sources":["components/Header.tsx","services/MarvelService.ts","components/Spinner.tsx","components/ErrorPage.tsx","components/RandomCharacter.tsx","components/CharacterCard.tsx","components/Characters.tsx","components/ChosenCharacter.tsx","components/FindForm.tsx","components/ErrorBoundary.tsx","App.tsx","index.tsx"],"names":["Header","className","href","MarvelService","_apiBase","_apiKey","_offset","getResourse","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","getCharacter","id","_transformChar","charItem","name","description","thumbnail","path","extension","homepage","urls","wiki","Spinner","xmlns","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","fill","stroke","strokeWidth","r","strokeDasharray","attributeName","type","repeatCount","dur","values","keyTimes","ErrorPage","RandomCharacter","state","char","loading","error","marvelService","updateChar","setState","Math","floor","random","this","thumbNailClasses","endsWith","ViewChar","props","src","alt","errorMessage","spinner","view","onClick","Component","CharacterCard","tabIndex","setId","onKeyPress","e","key","Characters","persons","charOffset","btnLoading","updateCharacters","String","forEach","item","push","map","disabled","ChosenCharacter","prevProps","prevState","comics","items","index","resourceURI","SkeletonView","errorView","loadingView","charView","JSON","stringify","skeletonView","FindForm","placeholder","ErrorBoundary","errorInfo","console","log","children","App","currentId","NaN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.defde78b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className={'py-7 flex justify-between items-center font-bold'}>\r\n            <a className={'text-3xl'} href=\"/\">\r\n                <span className={'text-color-main mr-1'}>Marvel</span>\r\n                information portal\r\n            </a>\r\n            <div className={'text-2xl'}>\r\n                <a className={'text-color-main'} href=\"/characters\">Characters</a>\r\n                <span className={'mx-1'}>/</span>\r\n                <a className={'text-black'} href=\"/comics\">Comics</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import {ICharItem, INarrowChar} from \"../interfaces/interfaces\";\r\n\r\nclass MarvelService {\r\n\r\n    readonly _apiBase: string = 'https://gateway.marvel.com:443/v1/public/'\r\n    readonly _apiKey: string = 'apikey=fbf8fdd906438a3eae9ccc474039212b'\r\n    readonly _offset: string = '310'\r\n\r\n    getResourse  = async (url: string): Promise<any>  => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}` )\r\n        }\r\n        return await res.json()\r\n    }\r\n\r\n    getAllCharacters = async (offset: string = this._offset): Promise<ICharItem[]> => {\r\n        const res = await this.getResourse(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`)\r\n        return res.data.results as Promise<ICharItem[]>\r\n    }\r\n\r\n    getCharacter = async (id: number): Promise<ICharItem> => {\r\n        const res = await this.getResourse(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=fbf8fdd906438a3eae9ccc474039212b`)\r\n        return res.data.results[0] as Promise<ICharItem>\r\n    }\r\n\r\n    _transformChar = (charItem: ICharItem): INarrowChar => {\r\n        return ({\r\n            id: charItem.id,\r\n            name: charItem.name,\r\n            description: charItem.description ? charItem.description : 'No detailed information',\r\n            thumbnail: `${charItem.thumbnail.path}.${charItem.thumbnail.extension}`,\r\n            homepage: charItem.urls[0].url,\r\n            wiki: charItem.urls[1].url\r\n        })\r\n    }\r\n}\r\n\r\nexport default MarvelService\r\n","const Spinner = () => {\r\n    return (\r\n        <svg className={'m-auto'} xmlns=\"http://www.w3.org/2000/svg\" style={{margin: 'auto', background: '#ffffff', display: 'block', shapeRendering: 'auto'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <circle cx=\"50\" cy=\"50\" fill=\"none\" stroke=\"#df1317\" strokeWidth=\"10\" r=\"35\" strokeDasharray=\"164.93361431346415 56.97787143782138\">\r\n                <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" dur=\"1s\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\"/>\r\n            </circle>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner","const ErrorPage = () => {\r\n    return (\r\n        <div className={'flex flex-col justify-center items-center bg-blue-600 w-full h-full '}>\r\n            <div className={'text-3xl text-white'}>Error 404</div>\r\n            <a className={'text-lg text-white hover:text-gray-600'}  href=\"/\">Go home</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPage","import {Component} from \"react\";\r\nimport MarvelService from \"../services/MarvelService\";\r\nimport {INarrowChar} from \"../interfaces/interfaces\";\r\nimport Spinner from \"./Spinner\";\r\nimport ErrorPage from \"./ErrorPage\";\r\n\r\ninterface RandomCharacterState {\r\n    char: Omit<INarrowChar, 'id'>,\r\n    loading: boolean,\r\n    error: boolean\r\n}\r\n\r\nclass RandomCharacter extends Component<any, RandomCharacterState>  {\r\n    state = {\r\n        char: {\r\n            name: '',\r\n            description: '',\r\n            thumbnail: '',\r\n            homepage: '',\r\n            wiki: ''\r\n        },\r\n        loading: true,\r\n        error: false\r\n    }\r\n\r\n    marvelService = new MarvelService()\r\n\r\n    updateChar = async (): Promise<any> => {\r\n        this.setState({loading: true});\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n        try {\r\n            const res = await this.marvelService.getCharacter(id);\r\n            const char = this.marvelService._transformChar(res);\r\n            this.setState({char});\r\n            this.setState({loading: false});\r\n        } catch (e) {\r\n            this.setState({loading: false});\r\n            this.setState({error: true})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateChar()\r\n    }\r\n\r\n    render() {\r\n        const {char, loading, error} = this.state\r\n        const thumbNailClasses = char.thumbnail.endsWith('available.jpg')  ? 'w-full h-full' : 'w-full h-full object-cover'\r\n\r\n        const ViewChar = (props: any) => {\r\n            const char = props.char\r\n            return (\r\n                <>\r\n                    <div className={'w-180p h-180p bg-gray-300 flex-shrink-0'}>\r\n                        <img className={thumbNailClasses} src={char.thumbnail} alt=\"character pic\"/>\r\n                    </div>\r\n                    <div className={'flex flex-col ml-30p overflow-visible'}>\r\n                        <h3 className={'text-header uppercase single-clamp w-72'}>{char.name}</h3>\r\n                        <p className={'text-p my-13p flex-grow line-clamp'}>{char.description}</p>\r\n                        <div className={'flex h-38p flex-shrink-0 overflow-visible'}>\r\n                            <a className={'btn-main'} href={char.homepage}>HOMEPAGE</a>\r\n                            <a className={'btn-gray ml-30p'} href={char.wiki}>WIKI</a>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n\r\n        const errorMessage = error ? <ErrorPage/> : null\r\n        const spinner = loading ? <Spinner/> : null\r\n        const view = !(errorMessage || spinner) ? <ViewChar char={char}/> : null\r\n\r\n\r\n        return (\r\n            <div className={'flex'}>\r\n                <div className={'w-1/2 h-250p p-35p pl-10 shadow-main flex'}>\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {view}\r\n                </div>\r\n                <div className={'w-1/2 h-250p p-35p pl-10 shadow-main bg-gray-900 bg-thor bg-thor-pos bg-no-repeat flex flex-col justify-between'}>\r\n                    <div className={'text-rnd-card'}>Random character for today!<br/>\r\n                        Do you want to get to know him better?</div>\r\n                    <div className={'text-rnd-card flex-grow mt-8'}>Or choose another one</div>\r\n                    <button className={'btn-main hover:-translate-y-2'} onClick={this.updateChar}>TRY IT</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RandomCharacter\r\n","import {INarrowChar} from \"../interfaces/interfaces\";\r\n\r\ninterface CharacterCardProps {\r\n    char: INarrowChar,\r\n    setId: (id: number) => void\r\n}\r\n\r\n\r\nconst CharacterCard = (props: CharacterCardProps) => {\r\n    const char = props.char\r\n    const thumbNailClasses = char.thumbnail.endsWith('available.jpg')  ? 'w-full h-full' : 'w-full h-full object-cover'\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            tabIndex={0}\r\n            onClick={()=> props.setId(char.id)}\r\n            onKeyPress={(e) => {\r\n                if (e.key === ' ' || e.key === 'Enter') {\r\n                    props.setId(char.id)\r\n                }\r\n            }}\r\n            className={'flex flex-col bg-gray-700 w-[200px] h-[318px] cursor-pointer focus:drop-shadow-card focus:-translate-y-4 transition duration-300 ease-in-out'}\r\n        >\r\n            <div className={'w-full h-200p bg-gray-300'}>\r\n                <img className={thumbNailClasses} src={char.thumbnail} alt=\"character pic\"/>\r\n            </div>\r\n            <h3 className={'text-ch-name mt-15p ml-15p uppercase '}>{char.name}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard\r\n","import CharacterCard from './CharacterCard'\r\nimport {Component} from \"react\";\r\nimport MarvelService from \"../services/MarvelService\";\r\nimport {INarrowChar} from \"../interfaces/interfaces\";\r\nimport Spinner from \"./Spinner\";\r\n\r\ninterface CharactersState {\r\n    persons: INarrowChar[],\r\n    loading: boolean,\r\n    charOffset: number,\r\n    btnLoading: boolean\r\n}\r\n\r\ninterface CharactersProps {\r\n    setId: (id: number) => void\r\n}\r\n\r\nclass Characters extends Component<CharactersProps, CharactersState>{\r\n    state = {\r\n        persons: [],\r\n        loading: true,\r\n        charOffset: 310,\r\n        btnLoading: false\r\n    }\r\n\r\n    marvelService = new MarvelService()\r\n\r\n    updateCharacters = async (offset: number): Promise<void> => {\r\n        this.setState({btnLoading: true})\r\n        const res = await this.marvelService.getAllCharacters(String(offset))\r\n        const persons: INarrowChar[] = []\r\n        res.forEach(item => persons.push(this.marvelService._transformChar(item)))\r\n        this.setState({persons: [...this.state.persons, ...persons]})\r\n        this.setState({loading: false})\r\n        this.setState(({charOffset}) => ({\r\n            charOffset: charOffset + 9\r\n        }))\r\n        this.setState({btnLoading: false})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCharacters(this.state.charOffset)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'flex flex-wrap gap-x-25p gap-y-30p w-[650px] justify-center'}>\r\n                {this.state.loading ?\r\n                    <Spinner/> :\r\n                    <>\r\n                        {this.state.persons.map((item: INarrowChar) => {\r\n                            return (\r\n                                <CharacterCard\r\n                                    key={item.id}\r\n                                    char={item}\r\n                                    setId={this.props.setId}\r\n                                />\r\n                                )\r\n\r\n                            }\r\n                        )}\r\n                        <button\r\n                            onClick={() => this.updateCharacters(this.state.charOffset)}\r\n                            className={'btn-main mt-4 mx-auto disabled:bg-gray-400'}\r\n                            disabled={this.state.btnLoading}\r\n                        >LOAD MORE</button>\r\n                    </>\r\n                   }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Characters\r\n","import {Component} from \"react\";\r\nimport {ICharItem, IComicsItem} from \"../interfaces/interfaces\";\r\nimport MarvelService from \"../services/MarvelService\";\r\nimport ErrorPage from \"./ErrorPage\";\r\nimport Spinner from \"./Spinner\";\r\n\r\ninterface ChosenCharacterProps {\r\n    id: number\r\n}\r\n\r\ninterface ChosenCharacterState {\r\n    char: ICharItem,\r\n    loading: boolean,\r\n    error: boolean\r\n}\r\n\r\nclass ChosenCharacter extends Component<ChosenCharacterProps, ChosenCharacterState>{\r\n    state = {\r\n        char: {} as ICharItem,\r\n        loading: false,\r\n        error: false\r\n    }\r\n\r\n    marvelService = new MarvelService()\r\n\r\n    async componentDidUpdate  (prevProps: ChosenCharacterProps, prevState: ChosenCharacterState) {\r\n        if (prevProps.id !== this.props.id) {\r\n            try {\r\n                await this.setState({loading: true})\r\n                const char = await this.marvelService.getCharacter(this.props.id)\r\n                this.setState({char})\r\n                await this.setState({loading: false})\r\n            }\r\n            catch (e) {\r\n                this.setState({error: true})\r\n                this.setState({loading: false})\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const ViewChar = (props: Pick<ChosenCharacterState, 'char'>) => {\r\n            const {name, urls, thumbnail, comics, description} = props.char\r\n            const thumbNailClasses = char.thumbnail.path.endsWith('available')  ? 'w-full h-full' : 'w-full h-full object-cover'\r\n\r\n\r\n            return(\r\n                <>\r\n                    <div className={'flex flex-grow-0 h-150p'}>\r\n                        <div className={'w-150p h-150p flex-shrink-0'}>\r\n                            <img className={thumbNailClasses} src={`${thumbnail.path}.${thumbnail.extension}`} alt=\"character pic\"/>\r\n                        </div>\r\n                        <div className={'flex flex-col ml-25p h-full'}>\r\n                            <h2 className={'text-header uppercase'}>{name}</h2>\r\n                            <a className={'btn-main mt-auto'} href={urls[1].url}>WIKI</a>\r\n                            <a className={'btn-main mt-2.5'} href={urls[0].url}>HOMEPAGE</a>\r\n                        </div>\r\n                    </div>\r\n                    <p className={'mt-4 text-p'}>{description}</p>\r\n                    <h4 className={'text-header-s mt-2.5'}>Comics:</h4>\r\n                    {comics.items.map((item: IComicsItem, index) => {\r\n                        // eslint-disable-next-line\r\n                        if (index >= 15) return\r\n                        return (\r\n                            <a key={item.name} href={item.resourceURI} className={'w-full mt-2.5  hover:scale-105'}>\r\n                                <div className={'w-full py-[3px] px-2.5 text-p shadow-comics-item'}>{item.name}</div>\r\n                            </a>\r\n                        )\r\n                    })}\r\n                </>\r\n            )\r\n        }\r\n\r\n        const SkeletonView = () => {\r\n            return (\r\n                <>\r\n                    <h4 className={'text-header-s text-center'}>Please select a character to see information</h4>\r\n                    <div className={'w-full mt-[33px] flex flex-col'}>\r\n                        <div className={'flex items-center'}>\r\n                            <div className={'bg-gray-300 w-10 h-10 rounded-full mr-[9px] flex-shrink-0'}/>\r\n                            <div className={'bg-gray-300 w-full h-4'}/>\r\n                        </div>\r\n                        <div className={'h-35p mt-15p bg-gray-300'}/>\r\n                        <div className={'h-35p mt-15p bg-gray-300'}/>\r\n                        <div className={'h-35p mt-15p bg-gray-300'}/>\r\n                    </div>\r\n                </>\r\n            )\r\n        };\r\n\r\n        const {char, loading, error} = this.state\r\n        const errorView = error ? <ErrorPage/> : null\r\n        const loadingView = loading ? <Spinner/> : null\r\n        const charView = JSON.stringify(char) !== '{}' && !loading && !error ? <ViewChar char={this.state.char}/> : null\r\n        const skeletonView = JSON.stringify(char) === '{}' && !loading && !error ? <SkeletonView/> : null\r\n\r\n\r\n        return (\r\n            <div className={'p-25p shadow-main w-full flex flex-col self-start'}>\r\n                {skeletonView}\r\n                {errorView}\r\n                {loadingView}\r\n                {charView}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChosenCharacter\r\n","const FindForm = () => {\r\n    return (\r\n        <div className={'shadow-main w-full mt-30p p-25p flex flex-col justify-between'}>\r\n            <h4 className={'text-header-s'}>Or find a character by name:</h4>\r\n            <div className=\"flex justify-between mt-[18px]\">\r\n                <input type=\"text\" name={'find-char'} className={'w-[250px] h-38p px-2 shadow-comics-item outline-none placeholder-fsz'} placeholder={'Enter name'}/>\r\n                <button className={'btn-main bg-main'}>FIND</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindForm\r\n","import {Component} from \"react\";\r\n\r\ninterface ErrorBoundaryState {\r\n    error: boolean\r\n}\r\n\r\nclass ErrorBoundary extends Component<any, ErrorBoundaryState> {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.log(error)\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <h2>Error came here</h2>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react';\nimport Header from \"./components/Header\";\nimport RandomCharacter from \"./components/RandomCharacter\";\nimport Characters from \"./components/Characters\";\nimport ChosenCharacter from \"./components/ChosenCharacter\";\nimport FindForm from \"./components/FindForm\";\nimport ComixBanner from \"./components/ComixBanner\";\nimport Comixes from \"./components/Comixes\";\nimport ComixPage from \"./components/ComixPage\";\nimport CharacterPage from \"./components/CharacterPage\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\n\ninterface AppState {\n    currentId: number\n}\n\nclass App  extends Component<any, AppState>{\n    state = {\n        currentId: NaN\n    }\n\n    setId = (id: number): void => {\n        this.setState({currentId: id})\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"w-[1100px] mx-auto\">\n                <Header/>\n                <RandomCharacter/>\n                <div className={'flex mt-12'}>\n                    <Characters setId={this.setId}/>\n                    <div className=\"flex flex-col ml-25p w-[425px]\">\n                        <ErrorBoundary>\n                            <ChosenCharacter id={this.state.currentId}/>\n                        </ErrorBoundary>\n                        <FindForm/>\n                    </div>\n                </div>\n                {/*<ComixBanner/>*/}\n                {/*<Comixes/>*/}\n                {/*<ComixPage/>*/}\n                {/*<CharacterPage/>*/}\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}